#version 460
#extension GL_EXT_nonuniform_qualifier: require
#extension GL_EXT_scalar_block_layout: require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_buffer_reference2 : require

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

struct Node{
    float min_x;
    float min_y;
    float min_z;
    float max_x;
    float max_y;
    float max_z;
    uint first_primitive;
    uint primitive_count;
    uint intersection_function_offset;
    uint pad0;
    uint pad1;
    uint pad2;
};

struct Instance{
    uint64_t blas_address;
    uint32_t instance_id;
    mat4 transform;
};

___INTERSECTION_STRUCT___
___RAY_STRUCT___

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer BlasRef{
    uint64_t vertex_buffer;
    uint64_t index_buffer;
    uint64_t triangle_buffer;
    Node nodes[];
};

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Vertices{
    vec3 v;
};

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Indices{
    uint32_t i;
};

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Triangles{
    uint32_t t;
};

layout(scalar, set = 0, binding = 0) readonly buffer TopLevelBvh{
    Node tlas[];
};

layout(scalar, set = 0, binding = 1) readonly buffer InstanceBuffer {
    Instance instances[];
};

layout(scalar, set = 0, binding = 2) readonly buffer RayBuffer {
    Ray rays[];
};

layout(scalar, set = 0, binding = 3) writeonly buffer ResultBufferName {
    Intersection results[];
} ResultBuffer;

layout(scalar, set = 0, binding = 4) readonly uniform FrameSettingsName {
    ivec2 resolution;
} FrameSettingsBuffer;

#define FLOAT_MAX 10000

void swap_int(inout uint a, inout uint b){
    uint tmp = a;
    a = b;
    b = tmp;
}

void swap_float(inout float a, inout float b){
    float tmp = a;
    a = b;
    b = tmp;
}

float max_element(vec3 v){
    return max(v.x, max(v.y, v.z));
}

float min_element(vec3 v){
    return min(v.x, min(v.y, v.z));
}

float intersect_aabb(vec3 aabb_min, vec3 aabb_max, vec3 origin, vec3 invDirection, float t_far) {

    vec3 t_min = (aabb_min - origin) * invDirection;
    vec3 t_max = (aabb_max - origin) * invDirection;

    vec3 t1 = min(t_min, t_max);
    vec3 t2 = max(t_min, t_max);

    float t_near = max_element(t1);
    float t_f = min_element(t2);

    bool h = t_f > t_near && t_near < t_far && t_f > 0.0;
    if(h)
        return min(t_f, t_near);
    else
        return t_far;
}

float intersect_triangle(Ray ray, vec3 v0, vec3 v1, vec3 v2, inout float u, inout float v)
{
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    vec3 h = cross(ray.direction, edge2);
    float a = dot(edge1, h);
    // Assume faceculling is enabled.
    if (a < 0.0001) {
        // Ray is parallel to the triangle
        return FLOAT_MAX;
    }

    float f = 1.0 / a;
    vec3 s = ray.origin - v0;
    u = f * dot(s, h);
    if (u < 0.0 || u > 1.0) {
        return FLOAT_MAX;
    }
    vec3 q = cross(s, edge1);
    v = f * dot(ray.direction, q);
    if (v < 0.0 || u + v > 1.0) {
        return FLOAT_MAX;
    }

    float t = f * dot(edge2, q);
    if (t < 0.000001) {
        return FLOAT_MAX;
    }

    return t;
}

___CUSTOM_INTERSECTION_FUNCTIONS___

float traverse_bttm_level(Ray ray, uint primitive_id, inout float u, inout float v, inout uint primitive_id);
float traverse_top_level(Ray ray, inout float u, inout float v, inout uint instance_id, inout uint primitive_id)
{
    uint node_idx = 0;
    uint stack_ptr = 0;
    uint stack[64];
    float d = FLOAT_MAX;
    vec3 invDirection = 1.0 / ray.direction;
    while(true) {
        Node node = tlas[node_idx];
        if (node.primitive_count > 0) {
            uint first = node.first_primitive;
            uint last = first + node.primitive_count;
            for (uint p = first; p < last; ++p) {
                float lu, lv;
                uint li = -1;
                float dl = traverse_bttm_level(ray, p, lu, lv, li);

                if (dl < d) {
                    d = dl;
                    u = lu;
                    v = lv;
                    instance_id = p;
                    primitive_id = li;
                }
            }
            if (stack_ptr == 0) {
                break;
            } else {
                stack_ptr -= 1;
                node_idx = stack[stack_ptr];
                continue;
            }
        }

        uint left_child_idx = tlas[node_idx].first_primitive ;
        uint right_child_idx = left_child_idx + 1;
        Node left_child = tlas[left_child_idx];
        Node right_child = tlas[right_child_idx];
        float left_distance = intersect_aabb(vec3(left_child.min_x, left_child.min_y, left_child.min_z), vec3(left_child.max_x, left_child.max_y, left_child.max_z), ray.origin, invDirection, FLOAT_MAX);
        float right_distance = intersect_aabb(vec3(right_child.min_x, right_child.min_y, right_child.min_z), vec3(right_child.max_x, right_child.max_y, right_child.max_z), ray.origin, invDirection, FLOAT_MAX);
        if (left_distance > d || right_distance > d){
            if(stack_ptr == 0){
                break;
            } else {
                stack_ptr -= 1;
                node_idx = stack[stack_ptr];
                continue;
            }
        }
        if (left_distance > right_distance) {
            swap_int(left_child_idx, right_child_idx);
            swap_float(left_distance, right_distance); 
        }
        if (left_distance == FLOAT_MAX) {
            if (stack_ptr == 0) {
                break;
            } else {
                stack_ptr -= 1;
                node_idx = stack[stack_ptr];
            }
        } else {
            node_idx = left_child_idx;
            if (right_distance != FLOAT_MAX) {
                stack[stack_ptr] = right_child_idx;
                stack_ptr += 1;
            }
        }
    }

    return d;
}

float traverse_bttm_level(Ray ray, uint instance_id, inout float u, inout float v, inout uint primitive_id)
{
    Instance instance = instances[instance_id];
    BlasRef blas_ref = BlasRef(instance.blas_address);

    Indices indices = Indices(blas_ref.index_buffer);
    Vertices vertices = Vertices(blas_ref.vertex_buffer);
    Triangles triangles = Triangles(blas_ref.triangle_buffer);

    uint node_idx = 0;
    uint stack_ptr = 0;
    uint stack[64];
    float d = FLOAT_MAX;
    mat4 inverse_transform = inverse(instance.transform);
    Ray rayInv;
    rayInv.origin = (inverse_transform * vec4(ray.origin, 1)).xyz;
    rayInv.direction = (inverse_transform * vec4(ray.direction, 0)).xyz;
    vec3 invDirection = 1.0 / rayInv.direction;
    
    while(true) {
        Node node = blas_ref.nodes[node_idx];
        if (node.primitive_count > 0) {
            uint first = node.first_primitive;
            uint last = first + node.primitive_count;
            for (uint p = first; p < last; ++p) {
                uint32_t triangle = triangles[p].t;
                uint32_t i0 = indices[triangle].i;
                uint32_t i1 = indices[triangle + 1].i;
                uint32_t i2 = indices[triangle + 2].i;
                float lu, lv;
                float dl = intersect_triangle(
                    rayInv,
                    vertices[i0].v.xyz,
                    vertices[i1 ].v.xyz,
                    vertices[i2].v.xyz,
                    lu, lv
                );

                if (dl < d) {
                    d = dl;
                    u = lu;
                    v = lv;
                    primitive_id = i0;
                }
            }
            if (stack_ptr == 0) {
                break;
            } else {
                stack_ptr -= 1;
                node_idx = stack[stack_ptr];
                continue;
            }
        }

        uint left_child_idx = node.first_primitive ;
        uint right_child_idx = left_child_idx + 1;
        Node left_child = blas_ref.nodes[left_child_idx];
        Node right_child = blas_ref.nodes[right_child_idx];
        float left_distance = intersect_aabb(vec3(left_child.min_x, left_child.min_y, left_child.min_z), vec3(left_child.max_x, left_child.max_y, left_child.max_z), rayInv.origin, invDirection, FLOAT_MAX);
        float right_distance = intersect_aabb( vec3(right_child.min_x, right_child.min_y, right_child.min_z), vec3(right_child.max_x, right_child.max_y, right_child.max_z), rayInv.origin, invDirection, FLOAT_MAX);

        if (left_distance > right_distance) {
            swap_int(left_child_idx, right_child_idx);
            swap_float(left_distance, right_distance); 
        }
        if (left_distance == FLOAT_MAX) {
            if (stack_ptr == 0) {
                break;
            } else {
                stack_ptr -= 1;
                node_idx = stack[stack_ptr];
            }
        } else {
            node_idx = left_child_idx;
            if (right_distance != FLOAT_MAX) {
                stack[stack_ptr] = right_child_idx;
                stack_ptr += 1;
            }
        }
    }

    return d;
}

void main(){
    if(gl_GlobalInvocationID.x < FrameSettingsBuffer.resolution.x && gl_GlobalInvocationID.y < FrameSettingsBuffer.resolution.y)
    {
        uint i = gl_GlobalInvocationID.y * FrameSettingsBuffer.resolution.x + gl_GlobalInvocationID.x;
        Ray ray = rays[i];
        float u, v;
        uint instance_id = 0;
        uint primitive_id = 0;
        float d = traverse_top_level(ray, u, v, instance_id, primitive_id);

        ResultBuffer.results[i] = Intersection(d, u, v, instance_id, primitive_id);
    }
}