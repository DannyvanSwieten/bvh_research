#version 450

struct AABB{
    vec3 min;
    vec3 max;
};

struct Node{
    int first_primitive;
    int primitive_count;
    AABB aabb;
};

struct Ray{
    vec3 origin;
    vec3 direction;
};

layout(set = 0, binding = 0) buffer BvhBuffer{
    Node nodes[];
} bvh;

layout(set = 0, binding = 1) buffer VertexBuffer{
    vec3 vertices[];
} Vertices;

layout(set = 0, binding = 2) buffer IndexBuffer{
    ivec3 indices[];
} Triangles;

layout(set = 0, binding = 3, rgba8) uniform image2D output_buffer;

#define FLOAT_MAX 1000000

void swap(out int a, out int b){
    int tmp = a;
    a = b;
    b = tmp;
}

float intersect_aabb(AABB aabb, Ray ray, float t_far) {
    float tx1 = (aabb.min.x - ray.origin.x) / ray.direction.x;
    float tx2 = (aabb.max.x - ray.origin.x) / ray.direction.x;
    float ty1 = (aabb.min.y - ray.origin.y) / ray.direction.y;
    float ty2 = (aabb.max.y - ray.origin.y) / ray.direction.y;
    float tz1 = (aabb.min.z - ray.origin.z) / ray.direction.z;
    float tz2 = (aabb.max.z - ray.origin.z) / ray.direction.z;

    float t_min = min(tx1, tx2);
    float t_max = max(tx1, tx2);

    t_min = max(t_min, min(ty1, ty2));
    t_max = min(t_max, max(ty1, ty2));

    t_min = max(t_min, min(tz1, tz2));
    t_max = min(t_max, max(tz1, tz2));

    bool hit = t_max >= t_min && t_min < t_far && t_max > 0.0;
    if (hit) {
        return min(t_min, t_max);
    } else {
        return t_far;
    }
}

float intersect_triangle(Ray ray, vec3 v0, vec3 v1, vec3 v2)
{
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    vec3 h = cross(ray.direction, edge2);
    float a = dot(edge1, h);
    if (a > -0.0001 && a < 0.0001) {
        // Ray is parallel to the triangle
        return FLOAT_MAX;
    }

    float f = 1.0 / a;
    vec3 s = ray.origin - v0;
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0) {
        return FLOAT_MAX;
    }
    vec3 q = cross(s, edge1);
    float v = f * dot(ray.direction, q);
    if (v < 0.0 || u + v > 1.0) {
        return FLOAT_MAX;
    }

    float t = f * dot(edge2, q);
    if (t < 0.000001) {
        return FLOAT_MAX;
    }

    return t;
}

float traverse(Ray ray)
{
    int node_idx = 0;
    int stack_ptr = 0;
    int stack[64];
    float d = FLOAT_MAX;
    while(true) {
        Node node = bvh.nodes[node_idx];
        if (bvh.nodes[node_idx].primitive_count > 0) {
            int first = node.first_primitive;
            int last = first + node.primitive_count;
            for (int p = first; p < last; ++p) {
                ivec3 triangle = Triangles.indices[p];
                float dl = intersect_triangle(
                    ray,
                    Vertices.vertices[triangle.x ],
                    Vertices.vertices[triangle.y ],
                    Vertices.vertices[triangle.z ]
                );

                if (dl < d) {
                    d = dl;
                }
            }
            if (stack_ptr == 0) {
                break;
            } else {
                stack_ptr -= 1;
                node_idx = stack[stack_ptr];
                continue;
            }
        }

        int left_child_idx = node.first_primitive ;
        int right_child_idx = left_child_idx + 1;
        Node left_child = bvh.nodes[node.first_primitive ];
        Node right_child = bvh.nodes[node.first_primitive  + 1];
        float left_distance = intersect_aabb(left_child.aabb, ray, FLOAT_MAX);
        float right_distance = intersect_aabb(right_child.aabb, ray, FLOAT_MAX);
        if (left_distance > right_distance) {
            swap(left_child_idx, right_child_idx);
            swap(left_distance, right_distance);
        }
        if (left_distance == FLOAT_MAX) {
            if (stack_ptr == 0) {
                break;
            } else {
                stack_ptr -= 1;
                node_idx = stack[stack_ptr];
            }
        } else {
            node_idx = left_child_idx;
            if (right_distance != FLOAT_MAX) {
                stack[stack_ptr] = right_child_idx;
                stack_ptr += 1;
            }
        }
    }

    return d;
}

Ray create_ray(vec2 resolution, vec2 frag_location, vec3 origin, float z){
    vec3 norm = vec3(frag_location / resolution, 0);
    vec3 p0 = vec3(-1, 1, z);
    vec3 p1 = vec3(1, 1, z);
    vec3 p2 = vec3(-1, -1, z);

    vec3 pixel_position = 
            p0
            + (p1 - p0) * norm.x
            + (p2 - p0) * norm.y;

    vec3 direction = normalize(pixel_position - origin);
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

void main(){
    Ray ray = create_ray(vec2(640, 640), vec2(gl_GlobalInvocationID.xy), vec3(0, 0, -3), -5);
    float d = traverse(ray);
}